---
layout: post
title:  "Automatic report generation using advanced MCP features"
date:   2025-08-21
image: /images/250821/splash2.png
---
![title](/images/250821/splash2.png)

### Exploring some of the more advanced features in the MCP specification
The Model Context Protocol [specification](https://modelcontextprotocol.io/specification/2025-06-18) has the goal of standardizing the way that Large Language Models (LLM) connect to your data sources and tools - like a ***USB-C*** for AI. <!--end_excerpt-->The most common and well known way of using MCP is to allow you AI of choice to call **tools** in an **MCP Server**, to allow it to interact with external data sources. Even though the MCP specification is not even a year old ([introduced by Anthropic](https://www.anthropic.com/news/model-context-protocol) in November 2024), the adoption of is has exploded and there is now a [gazillion](https://github.com/modelcontextprotocol/servers) MCP Servers available, for all kind of purposes. Some of my favorites:

- The [Microsofy Learn MCP Server](https://learn.microsoft.com/en-us/training/support/mcp) - gives the LLM access to the Microsoft docs, which is extremely useful when coding.
- The [Dataverse MCP Server](https://learn.microsoft.com/en-us/power-apps/maker/data-platform/data-platform-mcp) which I have talked a lot about.
- The [Github MCP Server](https://github.com/github/github-mcp-server).


In this blog, on my channel on [Youtube](https://www.youtube.com/channel/UCDQSTOqQRFNRIQzkkrw4oYA) and on [LinkedIn](https://www.linkedin.com/in/andreas-adner-70b1153/) I have explored the *tool calling* part of MCP in great detail, especially in the context of Power Platform and Dataverse:

- In numerous posts (see [here](https://www.linkedin.com/posts/andreas-adner-70b1153_mvp-agenticai-powerplatform-activity-7318953890094235650-g8ut?utm_source=share&utm_medium=member_desktop&rcm=ACoAAACM8rsBEgQIrYgb4NZAbnxwfDRk_Tu5e3w), [here](https://www.linkedin.com/posts/andreas-adner-70b1153_agenticai-mcp-dataverse-activity-7319027765075165185-QCBR?utm_source=share&utm_medium=member_desktop&rcm=ACoAAACM8rsBEgQIrYgb4NZAbnxwfDRk_Tu5e3w) and [here](https://www.linkedin.com/posts/andreas-adner-70b1153_mcp-agenticai-dataverse-activity-7319281911330185216-kQ_O?utm_source=share&utm_medium=member_desktop&rcm=ACoAAACM8rsBEgQIrYgb4NZAbnxwfDRk_Tu5e3w)) I have explored how a custom built MCP Server can query Dataverse using FetchXml queries. It turns out that many LLM:s are *very* proficient in FetchXml which makes this a very effective pattern for getting data from Dataverse using natural language. The [Claude models](https://docs.anthropic.com/en/docs/about-claude/models/overview) are especially good at this, in my experience. 
- When Microsoft released the preview version of the [Dataverse MCP server](https://learn.microsoft.com/en-us/power-apps/maker/data-platform/data-platform-mcp) I tested the capabilities of this server in great detail, putting it through its paces in several different scenarios - see [here](https://www.linkedin.com/posts/andreas-adner-70b1153_dataversemcpserver-activity-7344003681740075008-W3x4?utm_source=share&utm_medium=member_desktop&rcm=ACoAAACM8rsBEgQIrYgb4NZAbnxwfDRk_Tu5e3w) and [here](https://www.linkedin.com/posts/andreas-adner-70b1153_benchmark-of-llms-using-dataverse-mcp-server-activity-7348442438119665665-lLhZ?utm_source=share&utm_medium=member_desktop&rcm=ACoAAACM8rsBEgQIrYgb4NZAbnxwfDRk_Tu5e3w). I also did a pretty thorough benchmark of which LLMs (at that time, before the releas of GPT-5) that worked best with the Dataverse MCP Server, which can be found in [this blog post](https://nullpointer.se/dataverse/mcp/llm/2025/07/14/dataverse-llm-evaluation.html). I have also participated in the [private preview](https://msdynamicsworld.com/story/microsoft-enhance-dataverse-mcp-server-major-capabilities) of a new version of this server - and I intend to write more about it once is reaches general availability.
- An especially fun experiment was to use the [Dataverse MCP Server from Excel](https://www.linkedin.com/posts/andreas-adner-70b1153_dataverse-mcp-server-running-from-excel-activity-7345177569844953088-H3Y9?utm_source=share&utm_medium=member_desktop&rcm=ACoAAACM8rsBEgQIrYgb4NZAbnxwfDRk_Tu5e3w), showing that MCP is truly a USB-C for data that can be used from anywhere - not only from AI chatbots.

The posts and articles mentioned above focused strictly on the *tool calling* part of the MCP specification - the ability for your AI of choice to automatically call tools exposed by MCP Servers - which is probably what most people think about when MCP is mentioned. However, the MCP specification contains a lot of more cool features, and lately I have explored many of these in a number of posts on LinkedIn. Since it is still early days for the MCP specification, a lot of MCP Clients don't support all features of the MCP spec, as can be seen in this [feature support matrix](https://modelcontextprotocol.io/clients#feature-support-matrix). Lucky for me, VS Code has continuously been on the MCP bleeding edge, and is (at the time of writing), together with [fast-agent](https://fast-agent.ai/), the only client that supports all MCP features. So, VS Code has been my "weapon of choice" when exploring these features.

- [**Sampling**](https://modelcontextprotocol.io/docs/learn/client-concepts#sampling) - The ability for an MCP tool to do an **internal** call to an LLM is an extremely powerful feature. In [this](https://www.linkedin.com/posts/andreas-adner-70b1153_vscode-vscode-modelcontextprotocol-activity-7343352802733084673-hUiV?utm_source=share&utm_medium=member_desktop&rcm=ACoAAACM8rsBEgQIrYgb4NZAbnxwfDRk_Tu5e3w) post I explored how sampling can be used to allow an MCP tool to orchestrate its own **internal** tools.
- **Elicitation** - This features allows an MCP tools to ask questions to the user. I first explored this feature in my post about [Data migration using MCP](https://www.linkedin.com/posts/andreas-adner-70b1153_vscode-vscode-modelcontextprotocol-activity-7343352802733084673-hUiV?utm_source=share&utm_medium=member_desktop&rcm=ACoAAACM8rsBEgQIrYgb4NZAbnxwfDRk_Tu5e3w).
- **Resources** - 




